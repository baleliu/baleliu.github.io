(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{22:function(n,e,t){"use strict";var o=t(9),a=t.n(o),s=t(10),c=t.n(s),r=t(11),i=t.n(r),l=t(12),m=t.n(l),d=t(13),u=t.n(d),p=t(1),k=t.n(p),b=t(51),g=t.n(b),f=function(n){function e(){return a()(this,e),i()(this,m()(e).apply(this,arguments))}return u()(e,n),c()(e,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return k.a.createElement("div",null,k.a.createElement(g.a,{source:this.props.src}))}}]),e}(k.a.Component);f.defaultProps={src:"nothing"},e.a=f},61:function(n,e){n.exports="# 单机部署k8s并部署tomcat服务\n\n## 目录\n\n* [基本安装](#基本安装)\n* [k8s集群初始化](k8s集群初始化)\n* [安装过程中遇到的问题](安装过程中遇到的问题)\n* [安装完成后的配置](安装完成后的配置)\n* [配置tomcat RC](配置tomcatRC)\n* [配置tomcat service](配置tomcatservice)\n* [查看战果](查看战果)\n* [总结](总结)\n\n## 开始\n\n### 环境\n\n基本配置\n\n| 内容 | 参数 |\n| --- | --- |\n| 操作系统 | centos7 |\n| 机器环境 | VMware虚拟机（mac） |\n| 部署目标 | tomcat任意版本 |\n\n虚拟机配置\n\n| 内容 | 参数 |\n| --- | --- |\n| 网卡模式 | NAT |\n| CPU核心数 | 2 |\n| 内存 | 2G |\n### 基本安装\n安装`docker`\n```\n// 安装docker\n$ yum install -y docker-ce\n// 开机启动 && 启动服务\n$ systemctl enable docker && systemctl start docker\n```\n安装镜像\n> google 镜像并不在docker库中，因此要防止墙的问题，需要找代替镜像\n```\n// 查看kubeadm镜像\n$ kubeadm config images list\n\n// 结果\nk8s.gcr.io/kube-apiserver:v1.13.3\nk8s.gcr.io/kube-controller-manager:v1.13.3\nk8s.gcr.io/kube-scheduler:v1.13.3\nk8s.gcr.io/kube-proxy:v1.13.3\nk8s.gcr.io/pause:3.1\nk8s.gcr.io/etcd:3.2.24\nk8s.gcr.io/coredns:1.2.6\n\n// 执行如下脚本（没有翻墙的同学只能通过阿里云镜像或者其他镜像）\n$ for i in `kubeadm config images list`; do \n  imageName=${i#k8s.gcr.io/}\n  docker pull registry.aliyuncs.com/google_containers/$imageName\n  docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n  docker rmi registry.aliyuncs.com/google_containers/$imageName\ndone;\n\n// 开机启动 && 启动服务\n$ systemctl enable kubelet && systemctl start kubelet\n```\n\n### k8s集群初始化\n\n```\n// 安装命令\n$ kubeadm init\n```\n### 安装过程中遇到的问题\n```\n[ERROR NumCPU]: the number of available CPUs 1 is less than the required 2\n\n// 解决：\n// 虚拟机修改配置\n```\n![fe193e6ab82de87060c69001e46485f5.png](evernotecid://C0395E0D-46AA-405B-AA0B-91B088AE051C/appyinxiangcom/19256479/ENResource/p98)\n\n```\n[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1\n\n// 解决：\n// 编辑配置\n$ vi /etc/sysctl.conf\n// 添加如下内容\nnet.bridge.bridge-nf-call-iptables = 1\n```\n\n```\n[ERROR Swap]: running with swap on is not supported. Please disable swap\n\n// 解决：\n// 禁用swap功能\nswapoff -a\n\n// 修改配置\n$ vi /etc/fstab\n# 注释如下内容\n# k8s need disabled\n# /dev/mapper/centos-swap swap                    swap    defaults        0 0\n```\n安装成功\n```\nYour Kubernetes master has initialized successfully!\n```\n### 安装完成后的配置\n```\n// 安装成功后根据提示配置\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n// master 参与工作（单机模式必备）\nkubectl taint nodes --all node-role.kubernetes.io/master-\n```\n> 这边有一个BUG遇到，实际服务器可能不存在，但是虚拟机使用NAT模式，并且网卡配置为dhcp模式，动态获取ip\n> 导致一些里问题\n> eg：coredns 启动失败\n> eg：kube-apiserver-localhost.localdomain 启动失败\n> 解决改为静态配置\n\n```\nBOOTPROTO=static\n\n// ...省略...\n\n# ip 为自己实际环境ip\nIPADDR=192.168.228.128\nGATEWAY=192.168.228.2\nNETMASK=255.255.255.0\nDNS1=8.8.8.8\nDNS2=114.114.114.114\n```\n查看k8s集群情况(现在只有system pod)\n```\n$ kubectl get pods --all-namespaces\n\n// 结果如下\nkube-system   coredns-86c58d9df4-48pxx                        1/1     Running   0          6m10s\nkube-system   coredns-86c58d9df4-wdlmr                        1/1     Running   0          6m10s\nkube-system   etcd-localhost.localdomain                      1/1     Running   0          5m22s\nkube-system   kube-apiserver-localhost.localdomain            1/1     Running   0          5m18s\nkube-system   kube-controller-manager-localhost.localdomain   1/1     Running   0          5m4s\nkube-system   kube-proxy-56m56                                1/1     Running   0          6m10s\nkube-system   kube-scheduler-localhost.localdomain            1/1     Running   0          5m18s\nkube-system   weave-net-585s5                                 2/2     Running   0          60s\n```\n开启单机模式\n```\n$kubectl taint nodes --all node-role.kubernetes.io/master-\n```\n\n查看master节点情况\n> 不要慌，这里`NotReady` 完全正常\n> 安装网卡插件后，查询即可变为`Ready`\n```\n$ kubectl get nodes\n// 结果\nlocalhost.localdomain   NotReady    master   144m   v1.13.3\n```\n\n安装网络插件\n```\n// 这边有很多选择，本次使用`weave`\n// 配置地址 https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\n$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"\n```\n\n开通必要端口号 防止不必要的问题出现\n```\n// 6443\nfirewall-cmd --zone=public --add-port=6443/tcp --permanent && firewall-cmd --reload\n// 10250\nfirewall-cmd --zone=public --add-port=10250/tcp --permanent && firewall-cmd --reload\n```\n\n### 配置tomcat RC\n配置docker镜像\n```\n// 查看所需要镜像\ndocker search tomcat\n// 下载tag为tomcat的images（默认版本为lasted）\ndocker pull tomcat\n```\n\n> `replicas: 1` pod实例个数为1\n> `image: tomcat` docker镜像\n> `name: tomcat-demo` rc名称\n> `spec:template:` 当运行实例个数小于replicas时候，rc会根据spec:template: 自动生成对应个数pod\n```\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: tomcat-demo\nspec:\n  replicas: 1\n  selector:\n    app: tomcat-demo\n  template:\n    metadata:\n      labels:\n        app: tomcat-demo\n    spec:\n      containers:\n      - name: tomcat-demo\n        image: tomcat\n        ports:\n        - containerPort: 8080\n```\n运行配置并查看结果\n```\n// 运行yaml\n$ kubectl create -f tomcat-demo-rc.yaml\n// 结果如下\ntomcat-demo   NodePort    10.105.57.5   <none>        8080:30001/TCP   14s\n```\n\n### 配置tomcat service\n\n> `nodePort: 30001` 映射端口8080:30001\n> `name: tomcat-demo` 服务名\n\n`tomcat-demo-svc.yaml`配置文件内容\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: tomcat-demo\nspec:\n  type: NodePort\n  ports:\n   - port: 8080\n     nodePort: 30001\n  selector:\n    app: tomcat-demo\n```\n运行配置并查看结果\n```\n// 运行yaml\n$ kubectl create -f tomcat-demo-svc.yaml\n// 结果如下\ntomcat-demo   NodePort    10.105.57.5   <none>        8080:30001/TCP   14s\n```\n> `注意` svc与rc文件可以写在同一个yaml中\n开通端口号\n```\n$ firewall-cmd --zone=public --add-port=30001/tcp --permanent && firewall-cmd --reload\n```\n\n### 查看战果\n\n浏览器中查看结果 `http://${ip地址}:30001/`\n\n![d99f6f8e9d6886189989e6f292d9467e.png](evernotecid://C0395E0D-46AA-405B-AA0B-91B088AE051C/appyinxiangcom/19256479/ENResource/p97)\n\n### 总结\n\n> 安装过生中遇到不少坑，但是都都克服了，最后加入tomcat环节我觉得很有必要，作为初学者，很多文章，都在讲“k8s集群”， 各种集群部署文章，跟着流程安装了一圈，对错与否都模棱两可，还是需要一个“可视化的结果”\n\n\n"},82:function(n,e,t){"use strict";t.r(e),t.d(e,"default",function(){return f});var o=t(9),a=t.n(o),s=t(10),c=t.n(s),r=t(11),i=t.n(r),l=t(12),m=t.n(l),d=t(13),u=t.n(d),p=t(1),k=t.n(p),b=t(22),g=t(61),f=function(n){function e(){return a()(this,e),i()(this,m()(e).apply(this,arguments))}return u()(e,n),c()(e,[{key:"render",value:function(){return k.a.createElement("div",null,k.a.createElement(b.a,{src:g}))}}]),e}(k.a.Component)}}]);