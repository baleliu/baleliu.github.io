(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{22:function(n,e,o){"use strict";var c=o(9),t=o.n(c),r=o(10),a=o.n(r),i=o(11),s=o.n(i),d=o(12),m=o.n(d),k=o(13),p=o.n(k),u=o(1),l=o.n(u),E=o(53),f=o.n(E),v=function(n){function e(){return t()(this,e),s()(this,m()(e).apply(this,arguments))}return p()(e,n),a()(e,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return l.a.createElement("div",null,l.a.createElement(f.a,{source:this.props.src}))}}]),e}(l.a.Component);v.defaultProps={src:"nothing"},e.a=v},62:function(n,e){n.exports='# 记一次后端Tomcat多环境Docker改造\n\n\n## 背景\n\n> 项目比较小，开发阶段使用云服务器，只有dev环境，当时没有什么任何不适应的情况，项目采用`jenkins+tomcat+nginx`部署\n> 但是！\n> 项目进入 `uat阶段`-`>pro阶段`的时候，问题来了，环境变多了（开发进入后期，云服务的环境也迁入到机房的物理机），但是配置也跟着复杂了起来，这时候我想到了docker（这不是最适合`docker`的情景，但是用`docker`之后很爽）\n> 一不做而不休，撸起袖子打开iterm就把所有环境穿上docker的新衣裳\n\n## 思路\n\n- step1:安装docker\n- step2:将所有后端tomcat都替换成docker-tomcat\n- step3:修改后端jenkins配置\n\n> 这里考虑过把 jenkins也放入docker，把数据库也放入docker，redis也放入docker\n> 1.出于稳定性考虑，数据库服务器已经部署完成，因此不改造db\n> 2.目前jenkins控制docker镜像，因此jenkins放入docker个人感觉必要性不大，因此jenkins使用原本jenkins\n\n## 行动\n\n### 安装Docker\n> docker 安装啥的这里我不多墨迹，满大街都是文档\n\n```\n// todo docker 安装专题（waiting。。。）\n```\n\n```\n// 清理\nyum remove docker*\n```\n```\n// 环境\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n```\n// 安装\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nyum -y install docker-ce\n```\n```\n// 查看\ndocker version\n```\n![23777d78db86e54c89c730301b095bda.png](static/img1.jpg)\n\n> `ok` docker 准备好了\n\n\n### 下载Tomcat镜像&准备动作\n\n> 接下来我们把docker加工成我们想要的内容，有心的同学可以自己制作`docker file` 我这里就偷懒使用官方镜像了\n\n```\n// 查看服务器镜像，选择人数最多的就可以 或者去官网查询需要版本\ndocker search tomcat\n// `:`后为版本号，默认不写而`lasted`\n// 这里我使用tomcat9+jre8版本，详情见docker官网\ndocker pull tomcat:9.0.14-jre8\n```\n\n当前环境如下：\n\n> `dev` 日志重要性不大，日志输出多，频繁重启\n> `uat`&`pro`日志很重要，并且需要将日志记录在案，偶尔需要重启\n\n因此采取如下方案：\n> 1.所有环境使用volumes挂载公共路径\n> 2.所有环境使用volumes挂载webapp目录方便jenkins自动部署\n> 3.`uat`&`pro`环境使用volumes持久化存储logs目录下日志\n> 使用配置容器将上述内容配置起来（并不需要启动容器，仅仅提供配置）\n> 4.环境略多，将上述内容编写shell脚本方便使用\n\n```\n#!/bin/sh\nBASE="$0"\n\nENV="$1"\n\n# 简单校验 参数传入\nif [ ! $ENV ] ;then\n    echo "[$BASE ENV] ENV not empty";\n    exit 1;\nelse\n    echo "<-BEGIN->"\nfi\n# dev 环境\nif [$ENV = "dev"] ; then\ndocker create --name conf-tomcat-$ENV \\\n-v /home/tomcat/$ENV/elastic:/usr/local/shareDir \\\n-v /home/tomcat/$ENV/conf:/usr/local/tomcat/conf \\\n-v /home/tomcat/$ENV/webapp:/usr/local/tomcat/webapps \\\ntomcat\nelse\n# 其他环境\ndocker create --name conf-tomcat-$ENV \\\n-v /home/tomcat/$ENV/elastic:/usr/local/shareDir \\\n-v /home/tomcat/$ENV/conf:/usr/local/tomcat/conf \\\n-v /home/tomcat/$ENV/webapp:/usr/local/tomcat/webapps \\\n-v /home/tomcat/$ENV/logs:/usr/local/tomcat/logs \\\ntomcat\nfi\n\necho "<-END->"\n```\n\n```\n// `ok` 准备完成->运行脚本->查看配置情况\n// 记得`-a` 不加参数看不到未启动容器（未启用+异常退出）\ndocker ps -a\n\n// 记得给文件夹授予操作权限\n// 偷懒可以 chown -R 777 文件夹/\n```\n\n![76987d550eac2dd9734b701dea28bb70.png](evernotecid://C0395E0D-46AA-405B-AA0B-91B088AE051C/appyinxiangcom/19256479/ENResource/p93)\n\n不废话，容器运行起来！：\n```\n// 运行tomcat容器\n// 继承对应配置\n// 映射宿主机器端口\n// 直接运行\n// 容器重命名\ndocker run -itd -h 8080:8080 --volumes-from conf-dev --name tomcat-uat tomcat:9.0.14-jre8\n```\n\n```\n// 瞄一眼容器启动情况（没错很稳！）\ndocker ps\n```\n![4016c3ed97e9fed32d14e3efb7e8d93e.png](evernotecid://C0395E0D-46AA-405B-AA0B-91B088AE051C/appyinxiangcom/19256479/ENResource/p94)\n\n> 到这里docker容器准备已经完成，就等着jenkins使用呢！\n\n\n### Jenkins 配置\n> jenkins 安装也是满大街都是，可以压缩包，可以直接安装，也可以扔到docker里，反正你高兴就行。\n```\n// todo 很详细的jenkins安装 （waiting。。。）\n```\n\n```\n// 把jenkins用户加到docker分组中，让jenkins拥有操作cocker权限\n// 这步无限重要\nusermod -a docker jenkins\n```\n\n> 不管三七二十我们先把jenkins创建一个（假装是一个，其他的都是以后复制的）\n![163405319d0a5ffcf6e513931ac31aa3.png](evernotecid://C0395E0D-46AA-405B-AA0B-91B088AE051C/appyinxiangcom/19256479/ENResource/p95)\n\n> 配置jenkins\n> 这里需要注意`name=`后面需要写正则表达式，如果不加`^`那么会把我的`配置容器tomcat-env-conf`一起启动起来，虽然没影响，但是浪费资源，而且，如果不小心把其他测试容器弄起来，很吓人的。\n```\n# 进入打包目录，这里我叫`core`小伙伴可以根据`pom`的`finalName`来自己改动\ncd core\nENV=dev\n/usr/local/maven/bin/mvn clean package -P$ENV\ncd target\nrm -rf /home/tomcat/$ENV/webapp/core-$ENV.war\nmv core.war /home/tomcat/$ENV/webapp/core-$ENV.war\n# 喵一眼镜像情况，方便查看\ndocker ps -a\n# 重启我们需要的镜像\ndocker restart `docker ps -aq   --filter name="^tomcat-$ENV\\$"`\n```\n\n> ok 完成配置，启动一下喵一眼，并且把其他环境配置起来，复制工程即可\n\n![c427c37f2ef94d2286acd12fbabf549d.png](evernotecid://C0395E0D-46AA-405B-AA0B-91B088AE051C/appyinxiangcom/19256479/ENResource/p96)\n\n### 前端改造\n\n```\n// todo 前端多环境，下一次改造一波。\n```\n\n## 总结\n\n> docker 准备的期间略显麻烦，但是当来到jenkins的步骤的时候，就已经可以明显的体会到docker的方便，不仅配置少了很多，并且管用用户的处理也更加方便（之前jenkins要处理tomcat那可是要不少麻烦事情，可能有偷懒的小伙伴直接改成root，但是安全隐患又成一个问题）\n\n'},89:function(n,e,o){"use strict";o.r(e),o.d(e,"default",function(){return v});var c=o(9),t=o.n(c),r=o(10),a=o.n(r),i=o(11),s=o.n(i),d=o(12),m=o.n(d),k=o(13),p=o.n(k),u=o(1),l=o.n(u),E=o(22),f=o(62),v=function(n){function e(){return t()(this,e),s()(this,m()(e).apply(this,arguments))}return p()(e,n),a()(e,[{key:"render",value:function(){return l.a.createElement("div",null,l.a.createElement(E.a,{src:f}))}}]),e}(l.a.Component)}}]);